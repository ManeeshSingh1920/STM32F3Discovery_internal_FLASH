
STM32F3Discovery_internal_FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f3c  08001f3c  00011f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000010  08001f4c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08001f4c  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000920f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001625  00000000  00000000  0002924b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  0002a870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000418  00000000  00000000  0002ad20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001913b  00000000  00000000  0002b138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005a00  00000000  00000000  00044273  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b49c  00000000  00000000  00049c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d510f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001118  00000000  00000000  000d518c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ee0 	.word	0x08001ee0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001ee0 	.word	0x08001ee0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <HAL_Init+0x28>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x28>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 f90d 	bl	8000408 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ee:	2000      	movs	r0, #0
 80001f0:	f000 f808 	bl	8000204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f4:	f001 fd7a 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x54>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <HAL_InitTick+0x58>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f917 	bl	8000456 <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e00e      	b.n	8000250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b0f      	cmp	r3, #15
 8000236:	d80a      	bhi.n	800024e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000238:	2200      	movs	r2, #0
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f000 f8ed 	bl	800041e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_InitTick+0x5c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
 800024c:	e000      	b.n	8000250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024e:	2301      	movs	r3, #1
}
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000008 	.word	0x20000008
 800025c:	20000004 	.word	0x20000004
 8000260:	20000000 	.word	0x20000000

08000264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x20>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	461a      	mov	r2, r3
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <HAL_IncTick+0x24>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4413      	add	r3, r2
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <HAL_IncTick+0x24>)
 8000276:	6013      	str	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	2000002c 	.word	0x2000002c

0800028c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_GetTick+0x14>)
 8000292:	681b      	ldr	r3, [r3, #0]
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	2000002c 	.word	0x2000002c

080002a4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f003 0307 	and.w	r3, r3, #7
 80002b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <NVIC_SetPriorityGrouping+0x44>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	68ba      	ldr	r2, [r7, #8]
 80002bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c0:	4013      	ands	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d6:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <NVIC_SetPriorityGrouping+0x44>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	60d3      	str	r3, [r2, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	6039      	str	r1, [r7, #0]
 8000312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	da0b      	bge.n	8000334 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	490c      	ldr	r1, [pc, #48]	; (8000354 <NVIC_SetPriority+0x4c>)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f003 030f 	and.w	r3, r3, #15
 8000328:	3b04      	subs	r3, #4
 800032a:	0112      	lsls	r2, r2, #4
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	440b      	add	r3, r1
 8000330:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000332:	e009      	b.n	8000348 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4907      	ldr	r1, [pc, #28]	; (8000358 <NVIC_SetPriority+0x50>)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	0112      	lsls	r2, r2, #4
 8000340:	b2d2      	uxtb	r2, r2
 8000342:	440b      	add	r3, r1
 8000344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00
 8000358:	e000e100 	.word	0xe000e100

0800035c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800035c:	b480      	push	{r7}
 800035e:	b089      	sub	sp, #36	; 0x24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	f1c3 0307 	rsb	r3, r3, #7
 8000376:	2b04      	cmp	r3, #4
 8000378:	bf28      	it	cs
 800037a:	2304      	movcs	r3, #4
 800037c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3304      	adds	r3, #4
 8000382:	2b06      	cmp	r3, #6
 8000384:	d902      	bls.n	800038c <NVIC_EncodePriority+0x30>
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3b03      	subs	r3, #3
 800038a:	e000      	b.n	800038e <NVIC_EncodePriority+0x32>
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	f04f 32ff 	mov.w	r2, #4294967295
 8000394:	69bb      	ldr	r3, [r7, #24]
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	43da      	mvns	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	401a      	ands	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a4:	f04f 31ff 	mov.w	r1, #4294967295
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	43d9      	mvns	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b4:	4313      	orrs	r3, r2
         );
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3724      	adds	r7, #36	; 0x24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003d4:	d301      	bcc.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e00f      	b.n	80003fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <SysTick_Config+0x40>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3b01      	subs	r3, #1
 80003e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	210f      	movs	r1, #15
 80003e4:	f04f 30ff 	mov.w	r0, #4294967295
 80003e8:	f7ff ff8e 	bl	8000308 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <SysTick_Config+0x40>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <SysTick_Config+0x40>)
 80003f4:	2207      	movs	r2, #7
 80003f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	e000e010 	.word	0xe000e010

08000408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f7ff ff47 	bl	80002a4 <NVIC_SetPriorityGrouping>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b086      	sub	sp, #24
 8000422:	af00      	add	r7, sp, #0
 8000424:	4603      	mov	r3, r0
 8000426:	60b9      	str	r1, [r7, #8]
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000430:	f7ff ff5c 	bl	80002ec <NVIC_GetPriorityGrouping>
 8000434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	68b9      	ldr	r1, [r7, #8]
 800043a:	6978      	ldr	r0, [r7, #20]
 800043c:	f7ff ff8e 	bl	800035c <NVIC_EncodePriority>
 8000440:	4602      	mov	r2, r0
 8000442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000446:	4611      	mov	r1, r2
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff5d 	bl	8000308 <NVIC_SetPriority>
}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffb0 	bl	80003c4 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b087      	sub	sp, #28
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800047e:	2301      	movs	r3, #1
 8000480:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000482:	2300      	movs	r3, #0
 8000484:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000486:	2300      	movs	r3, #0
 8000488:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800048a:	4b2f      	ldr	r3, [pc, #188]	; (8000548 <HAL_FLASH_Program+0xd8>)
 800048c:	7e1b      	ldrb	r3, [r3, #24]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d101      	bne.n	8000496 <HAL_FLASH_Program+0x26>
 8000492:	2302      	movs	r3, #2
 8000494:	e054      	b.n	8000540 <HAL_FLASH_Program+0xd0>
 8000496:	4b2c      	ldr	r3, [pc, #176]	; (8000548 <HAL_FLASH_Program+0xd8>)
 8000498:	2201      	movs	r2, #1
 800049a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800049c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80004a0:	f000 f8d4 	bl	800064c <FLASH_WaitForLastOperation>
 80004a4:	4603      	mov	r3, r0
 80004a6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d144      	bne.n	8000538 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d102      	bne.n	80004ba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80004b4:	2301      	movs	r3, #1
 80004b6:	757b      	strb	r3, [r7, #21]
 80004b8:	e007      	b.n	80004ca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d102      	bne.n	80004c6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80004c0:	2302      	movs	r3, #2
 80004c2:	757b      	strb	r3, [r7, #21]
 80004c4:	e001      	b.n	80004ca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80004c6:	2304      	movs	r3, #4
 80004c8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	75bb      	strb	r3, [r7, #22]
 80004ce:	e02d      	b.n	800052c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80004d0:	7dbb      	ldrb	r3, [r7, #22]
 80004d2:	005a      	lsls	r2, r3, #1
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	eb02 0c03 	add.w	ip, r2, r3
 80004da:	7dbb      	ldrb	r3, [r7, #22]
 80004dc:	0119      	lsls	r1, r3, #4
 80004de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004e2:	f1c1 0620 	rsb	r6, r1, #32
 80004e6:	f1a1 0020 	sub.w	r0, r1, #32
 80004ea:	fa22 f401 	lsr.w	r4, r2, r1
 80004ee:	fa03 f606 	lsl.w	r6, r3, r6
 80004f2:	4334      	orrs	r4, r6
 80004f4:	fa23 f000 	lsr.w	r0, r3, r0
 80004f8:	4304      	orrs	r4, r0
 80004fa:	fa23 f501 	lsr.w	r5, r3, r1
 80004fe:	b2a3      	uxth	r3, r4
 8000500:	4619      	mov	r1, r3
 8000502:	4660      	mov	r0, ip
 8000504:	f000 f886 	bl	8000614 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000508:	f24c 3050 	movw	r0, #50000	; 0xc350
 800050c:	f000 f89e 	bl	800064c <FLASH_WaitForLastOperation>
 8000510:	4603      	mov	r3, r0
 8000512:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <HAL_FLASH_Program+0xdc>)
 8000516:	691b      	ldr	r3, [r3, #16]
 8000518:	4a0c      	ldr	r2, [pc, #48]	; (800054c <HAL_FLASH_Program+0xdc>)
 800051a:	f023 0301 	bic.w	r3, r3, #1
 800051e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000520:	7dfb      	ldrb	r3, [r7, #23]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d107      	bne.n	8000536 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000526:	7dbb      	ldrb	r3, [r7, #22]
 8000528:	3301      	adds	r3, #1
 800052a:	75bb      	strb	r3, [r7, #22]
 800052c:	7dba      	ldrb	r2, [r7, #22]
 800052e:	7d7b      	ldrb	r3, [r7, #21]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3cd      	bcc.n	80004d0 <HAL_FLASH_Program+0x60>
 8000534:	e000      	b.n	8000538 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000536:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <HAL_FLASH_Program+0xd8>)
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]

  return status;
 800053e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000540:	4618      	mov	r0, r3
 8000542:	371c      	adds	r7, #28
 8000544:	46bd      	mov	sp, r7
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	20000030 	.word	0x20000030
 800054c:	40022000 	.word	0x40022000

08000550 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000556:	2300      	movs	r3, #0
 8000558:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <HAL_FLASH_Unlock+0x40>)
 800055c:	691b      	ldr	r3, [r3, #16]
 800055e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000562:	2b00      	cmp	r3, #0
 8000564:	d00d      	beq.n	8000582 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <HAL_FLASH_Unlock+0x40>)
 8000568:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <HAL_FLASH_Unlock+0x44>)
 800056a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_FLASH_Unlock+0x40>)
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <HAL_FLASH_Unlock+0x48>)
 8000570:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <HAL_FLASH_Unlock+0x40>)
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000582:	79fb      	ldrb	r3, [r7, #7]
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40022000 	.word	0x40022000
 8000594:	45670123 	.word	0x45670123
 8000598:	cdef89ab 	.word	0xcdef89ab

0800059c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_FLASH_Lock+0x1c>)
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_FLASH_Lock+0x1c>)
 80005a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40022000 	.word	0x40022000

080005bc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d107      	bne.n	80005dc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_FLASH_OB_Unlock+0x30>)
 80005d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <HAL_FLASH_OB_Unlock+0x34>)
 80005d6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80005d8:	2300      	movs	r3, #0
 80005da:	e000      	b.n	80005de <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80005dc:	2301      	movs	r3, #1
}
 80005de:	4618      	mov	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40022000 	.word	0x40022000
 80005ec:	45670123 	.word	0x45670123
 80005f0:	cdef89ab 	.word	0xcdef89ab

080005f4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_FLASH_OB_Lock+0x1c>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_FLASH_OB_Lock+0x1c>)
 80005fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000602:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40022000 	.word	0x40022000

08000614 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <FLASH_Program_HalfWord+0x30>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <FLASH_Program_HalfWord+0x34>)
 8000628:	691b      	ldr	r3, [r3, #16]
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <FLASH_Program_HalfWord+0x34>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	887a      	ldrh	r2, [r7, #2]
 8000636:	801a      	strh	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	20000030 	.word	0x20000030
 8000648:	40022000 	.word	0x40022000

0800064c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff fe1a 	bl	800028c <HAL_GetTick>
 8000658:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800065a:	e010      	b.n	800067e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000662:	d00c      	beq.n	800067e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <FLASH_WaitForLastOperation+0x2e>
 800066a:	f7ff fe0f 	bl	800028c <HAL_GetTick>
 800066e:	4602      	mov	r2, r0
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	429a      	cmp	r2, r3
 8000678:	d201      	bcs.n	800067e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800067a:	2303      	movs	r3, #3
 800067c:	e01f      	b.n	80006be <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <FLASH_WaitForLastOperation+0x7c>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	2b01      	cmp	r3, #1
 8000688:	d0e8      	beq.n	800065c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <FLASH_WaitForLastOperation+0x7c>)
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	2b20      	cmp	r3, #32
 8000694:	d102      	bne.n	800069c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <FLASH_WaitForLastOperation+0x7c>)
 8000698:	2220      	movs	r2, #32
 800069a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <FLASH_WaitForLastOperation+0x7c>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	f003 0310 	and.w	r3, r3, #16
 80006a4:	2b10      	cmp	r3, #16
 80006a6:	d005      	beq.n	80006b4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <FLASH_WaitForLastOperation+0x7c>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	d103      	bne.n	80006bc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80006b4:	f000 f80a 	bl	80006cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e000      	b.n	80006be <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40022000 	.word	0x40022000

080006cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <FLASH_SetErrorCode+0x5c>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	f003 0310 	and.w	r3, r3, #16
 80006de:	2b10      	cmp	r3, #16
 80006e0:	d109      	bne.n	80006f6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <FLASH_SetErrorCode+0x60>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <FLASH_SetErrorCode+0x60>)
 80006ec:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <FLASH_SetErrorCode+0x5c>)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d109      	bne.n	8000716 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <FLASH_SetErrorCode+0x60>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <FLASH_SetErrorCode+0x60>)
 800070c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <FLASH_SetErrorCode+0x5c>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	60d3      	str	r3, [r2, #12]
}  
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40022000 	.word	0x40022000
 800072c:	20000030 	.word	0x20000030

08000730 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <HAL_FLASHEx_Erase+0xcc>)
 8000744:	7e1b      	ldrb	r3, [r3, #24]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d101      	bne.n	800074e <HAL_FLASHEx_Erase+0x1e>
 800074a:	2302      	movs	r3, #2
 800074c:	e052      	b.n	80007f4 <HAL_FLASHEx_Erase+0xc4>
 800074e:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <HAL_FLASHEx_Erase+0xcc>)
 8000750:	2201      	movs	r2, #1
 8000752:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d115      	bne.n	8000788 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800075c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000760:	f7ff ff74 	bl	800064c <FLASH_WaitForLastOperation>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d140      	bne.n	80007ec <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800076a:	f000 f84b 	bl	8000804 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800076e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000772:	f7ff ff6b 	bl	800064c <FLASH_WaitForLastOperation>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_FLASHEx_Erase+0xd0>)
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	4a20      	ldr	r2, [pc, #128]	; (8000800 <HAL_FLASHEx_Erase+0xd0>)
 8000780:	f023 0304 	bic.w	r3, r3, #4
 8000784:	6113      	str	r3, [r2, #16]
 8000786:	e031      	b.n	80007ec <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000788:	f24c 3050 	movw	r0, #50000	; 0xc350
 800078c:	f7ff ff5e 	bl	800064c <FLASH_WaitForLastOperation>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d12a      	bne.n	80007ec <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	f04f 32ff 	mov.w	r2, #4294967295
 800079c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	e019      	b.n	80007da <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80007a6:	68b8      	ldr	r0, [r7, #8]
 80007a8:	f000 f846 	bl	8000838 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80007ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007b0:	f7ff ff4c 	bl	800064c <FLASH_WaitForLastOperation>
 80007b4:	4603      	mov	r3, r0
 80007b6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_FLASHEx_Erase+0xd0>)
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_FLASHEx_Erase+0xd0>)
 80007be:	f023 0302 	bic.w	r3, r3, #2
 80007c2:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	601a      	str	r2, [r3, #0]
            break;
 80007d0:	e00c      	b.n	80007ec <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80007d8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	02da      	lsls	r2, r3, #11
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d3dc      	bcc.n	80007a6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_FLASHEx_Erase+0xcc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	761a      	strb	r2, [r3, #24]

  return status;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000030 	.word	0x20000030
 8000800:	40022000 	.word	0x40022000

08000804 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <FLASH_MassErase+0x2c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <FLASH_MassErase+0x30>)
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <FLASH_MassErase+0x30>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <FLASH_MassErase+0x30>)
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <FLASH_MassErase+0x30>)
 8000820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000824:	6113      	str	r3, [r2, #16]
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	20000030 	.word	0x20000030
 8000834:	40022000 	.word	0x40022000

08000838 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <FLASH_PageErase+0x38>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <FLASH_PageErase+0x3c>)
 8000848:	691b      	ldr	r3, [r3, #16]
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <FLASH_PageErase+0x3c>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <FLASH_PageErase+0x3c>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <FLASH_PageErase+0x3c>)
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	4a05      	ldr	r2, [pc, #20]	; (8000874 <FLASH_PageErase+0x3c>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000862:	6113      	str	r3, [r2, #16]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20000030 	.word	0x20000030
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800087e:	af00      	add	r7, sp, #0
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	f000 beda 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	f000 816e 	beq.w	8000b7e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008a2:	4bb5      	ldr	r3, [pc, #724]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f003 030c 	and.w	r3, r3, #12
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d00c      	beq.n	80008c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008ae:	4bb2      	ldr	r3, [pc, #712]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 030c 	and.w	r3, r3, #12
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d15a      	bne.n	8000970 <HAL_RCC_OscConfig+0xf8>
 80008ba:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c6:	d153      	bne.n	8000970 <HAL_RCC_OscConfig+0xf8>
 80008c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80008d4:	fa93 f3a3 	rbit	r3, r3
 80008d8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008e0:	fab3 f383 	clz	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d102      	bne.n	80008fa <HAL_RCC_OscConfig+0x82>
 80008f4:	4ba0      	ldr	r3, [pc, #640]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	e015      	b.n	8000926 <HAL_RCC_OscConfig+0xae>
 80008fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000902:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000906:	fa93 f3a3 	rbit	r3, r3
 800090a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800090e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000912:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000916:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800091a:	fa93 f3a3 	rbit	r3, r3
 800091e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000922:	4b95      	ldr	r3, [pc, #596]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800092a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800092e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000932:	fa92 f2a2 	rbit	r2, r2
 8000936:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800093a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	b252      	sxtb	r2, r2
 8000944:	f042 0220 	orr.w	r2, r2, #32
 8000948:	b252      	sxtb	r2, r2
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	f002 021f 	and.w	r2, r2, #31
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	f000 810f 	beq.w	8000b7c <HAL_RCC_OscConfig+0x304>
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	f040 8109 	bne.w	8000b7c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	f000 be6b 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097a:	d106      	bne.n	800098a <HAL_RCC_OscConfig+0x112>
 800097c:	4b7e      	ldr	r3, [pc, #504]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a7d      	ldr	r2, [pc, #500]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	e030      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10c      	bne.n	80009ae <HAL_RCC_OscConfig+0x136>
 8000994:	4b78      	ldr	r3, [pc, #480]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a77      	ldr	r2, [pc, #476]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 800099a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b75      	ldr	r3, [pc, #468]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a74      	ldr	r2, [pc, #464]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e01e      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009b8:	d10c      	bne.n	80009d4 <HAL_RCC_OscConfig+0x15c>
 80009ba:	4b6f      	ldr	r3, [pc, #444]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a6e      	ldr	r2, [pc, #440]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	4b6c      	ldr	r3, [pc, #432]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a6b      	ldr	r2, [pc, #428]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e00b      	b.n	80009ec <HAL_RCC_OscConfig+0x174>
 80009d4:	4b68      	ldr	r3, [pc, #416]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a67      	ldr	r2, [pc, #412]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b65      	ldr	r3, [pc, #404]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a64      	ldr	r2, [pc, #400]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009ec:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	f023 020f 	bic.w	r2, r3, #15
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	495f      	ldr	r1, [pc, #380]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d05a      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fc3f 	bl	800028c <HAL_GetTick>
 8000a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a12:	e00a      	b.n	8000a2a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a14:	f7ff fc3a 	bl	800028c <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b64      	cmp	r3, #100	; 0x64
 8000a22:	d902      	bls.n	8000a2a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	f000 be0e 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a36:	fa93 f3a3 	rbit	r3, r3
 8000a3a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a42:	fab3 f383 	clz	r3, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	095b      	lsrs	r3, r3, #5
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <HAL_RCC_OscConfig+0x1e4>
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	e015      	b.n	8000a88 <HAL_RCC_OscConfig+0x210>
 8000a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a60:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a68:	fa93 f3a3 	rbit	r3, r3
 8000a6c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a74:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a78:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a7c:	fa93 f3a3 	rbit	r3, r3
 8000a80:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a84:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000a90:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a94:	fa92 f2a2 	rbit	r2, r2
 8000a98:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000a9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b252      	sxtb	r2, r2
 8000aa6:	f042 0220 	orr.w	r2, r2, #32
 8000aaa:	b252      	sxtb	r2, r2
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	f002 021f 	and.w	r2, r2, #31
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0aa      	beq.n	8000a14 <HAL_RCC_OscConfig+0x19c>
 8000abe:	e05e      	b.n	8000b7e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fbe4 	bl	800028c <HAL_GetTick>
 8000ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac8:	e00a      	b.n	8000ae0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aca:	f7ff fbdf 	bl	800028c <HAL_GetTick>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b64      	cmp	r3, #100	; 0x64
 8000ad8:	d902      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000ada:	2303      	movs	r3, #3
 8000adc:	f000 bdb3 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000aec:	fa93 f3a3 	rbit	r3, r3
 8000af0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000af4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af8:	fab3 f383 	clz	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d102      	bne.n	8000b12 <HAL_RCC_OscConfig+0x29a>
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	e015      	b.n	8000b3e <HAL_RCC_OscConfig+0x2c6>
 8000b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_RCC_OscConfig+0x300>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b42:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b46:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b4a:	fa92 f2a2 	rbit	r2, r2
 8000b4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	b252      	sxtb	r2, r2
 8000b5c:	f042 0220 	orr.w	r2, r2, #32
 8000b60:	b252      	sxtb	r2, r2
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	f002 021f 	and.w	r2, r2, #31
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1aa      	bne.n	8000aca <HAL_RCC_OscConfig+0x252>
 8000b74:	e003      	b.n	8000b7e <HAL_RCC_OscConfig+0x306>
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 8170 	beq.w	8000e6e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b8e:	4bd0      	ldr	r3, [pc, #832]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 030c 	and.w	r3, r3, #12
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00b      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b9a:	4bcd      	ldr	r3, [pc, #820]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d16d      	bne.n	8000c82 <HAL_RCC_OscConfig+0x40a>
 8000ba6:	4bca      	ldr	r3, [pc, #808]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d167      	bne.n	8000c82 <HAL_RCC_OscConfig+0x40a>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000bc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc8:	fab3 f383 	clz	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d102      	bne.n	8000be2 <HAL_RCC_OscConfig+0x36a>
 8000bdc:	4bbc      	ldr	r3, [pc, #752]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	e013      	b.n	8000c0a <HAL_RCC_OscConfig+0x392>
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000bec:	fa93 f3a3 	rbit	r3, r3
 8000bf0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000bfa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c06:	4bb2      	ldr	r3, [pc, #712]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c10:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c14:	fa92 f2a2 	rbit	r2, r2
 8000c18:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c1c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b252      	sxtb	r2, r2
 8000c26:	f042 0220 	orr.w	r2, r2, #32
 8000c2a:	b252      	sxtb	r2, r2
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	f002 021f 	and.w	r2, r2, #31
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <HAL_RCC_OscConfig+0x3d6>
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d002      	beq.n	8000c4e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f000 bcfc 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4e:	4ba0      	ldr	r3, [pc, #640]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6959      	ldr	r1, [r3, #20]
 8000c5c:	23f8      	movs	r3, #248	; 0xf8
 8000c5e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c62:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c6e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	4995      	ldr	r1, [pc, #596]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c80:	e0f5      	b.n	8000e6e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 8085 	beq.w	8000d98 <HAL_RCC_OscConfig+0x520>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000ca0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fae8 	bl	800028c <HAL_GetTick>
 8000cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc0:	e00a      	b.n	8000cd8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fae3 	bl	800028c <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d902      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f000 bcb7 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000cea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cee:	fab3 f383 	clz	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	095b      	lsrs	r3, r3, #5
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d102      	bne.n	8000d08 <HAL_RCC_OscConfig+0x490>
 8000d02:	4b73      	ldr	r3, [pc, #460]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	e013      	b.n	8000d30 <HAL_RCC_OscConfig+0x4b8>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d20:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d2c:	4b68      	ldr	r3, [pc, #416]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	2202      	movs	r2, #2
 8000d32:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d36:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	b252      	sxtb	r2, r2
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	b252      	sxtb	r2, r2
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f002 021f 	and.w	r2, r2, #31
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0ae      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d64:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6959      	ldr	r1, [r3, #20]
 8000d72:	23f8      	movs	r3, #248	; 0xf8
 8000d74:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000d84:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	494f      	ldr	r1, [pc, #316]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
 8000d96:	e06a      	b.n	8000e6e <HAL_RCC_OscConfig+0x5f6>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000daa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000db6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fa63 	bl	800028c <HAL_GetTick>
 8000dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	e00a      	b.n	8000de2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fa5e 	bl	800028c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d902      	bls.n	8000de2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f000 bc32 	b.w	8001646 <HAL_RCC_OscConfig+0xdce>
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df8:	fab3 f383 	clz	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_RCC_OscConfig+0x59a>
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	e013      	b.n	8000e3a <HAL_RCC_OscConfig+0x5c2>
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_RCC_OscConfig+0x658>)
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e40:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e44:	fa92 f2a2 	rbit	r2, r2
 8000e48:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e4c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	b252      	sxtb	r2, r2
 8000e56:	f042 0220 	orr.w	r2, r2, #32
 8000e5a:	b252      	sxtb	r2, r2
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	f002 021f 	and.w	r2, r2, #31
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1ae      	bne.n	8000dcc <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80d8 	beq.w	800102e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d067      	beq.n	8000f58 <HAL_RCC_OscConfig+0x6e0>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000e9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_RCC_OscConfig+0x65c>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2301      	movs	r3, #1
 8000eae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff f9ec 	bl	800028c <HAL_GetTick>
 8000eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb8:	e00e      	b.n	8000ed8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eba:	f7ff f9e7 	bl	800028c <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d906      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e3bb      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	10908120 	.word	0x10908120
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ef4:	fa93 f2a3 	rbit	r2, r3
 8000ef8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f02:	2202      	movs	r2, #2
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	fa93 f2a3 	rbit	r2, r3
 8000f10:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	4ba5      	ldr	r3, [pc, #660]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8000f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f1e:	2102      	movs	r1, #2
 8000f20:	6019      	str	r1, [r3, #0]
 8000f22:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	fa93 f1a3 	rbit	r1, r3
 8000f2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f30:	6019      	str	r1, [r3, #0]
  return(result);
 8000f32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0b1      	beq.n	8000eba <HAL_RCC_OscConfig+0x642>
 8000f56:	e06a      	b.n	800102e <HAL_RCC_OscConfig+0x7b6>
 8000f58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	fa93 f2a3 	rbit	r2, r3
 8000f6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f6e:	601a      	str	r2, [r3, #0]
  return(result);
 8000f70:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <HAL_RCC_OscConfig+0x938>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	461a      	mov	r2, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff f980 	bl	800028c <HAL_GetTick>
 8000f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f90:	e009      	b.n	8000fa6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f92:	f7ff f97b 	bl	800028c <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e34f      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8000fa6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000faa:	2202      	movs	r2, #2
 8000fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	fa93 f2a3 	rbit	r2, r3
 8000fb8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	fa93 f2a3 	rbit	r2, r3
 8000fd0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fda:	2202      	movs	r2, #2
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	fa93 f2a3 	rbit	r2, r3
 8000fe8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000fec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fee:	4b6f      	ldr	r3, [pc, #444]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8000ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	6019      	str	r1, [r3, #0]
 8000ffa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	fa93 f1a3 	rbit	r1, r3
 8001004:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001008:	6019      	str	r1, [r3, #0]
  return(result);
 800100a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b25b      	sxtb	r3, r3
 8001016:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800101a:	b25b      	sxtb	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1b1      	bne.n	8000f92 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 8159 	beq.w	80012f0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001044:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d112      	bne.n	8001076 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	4b56      	ldr	r3, [pc, #344]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	61d3      	str	r3, [r2, #28]
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001070:	2301      	movs	r3, #1
 8001072:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff f8fd 	bl	800028c <HAL_GetTick>
 8001092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	e009      	b.n	80010ac <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001098:	f7ff f8f8 	bl	800028c <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e2cc      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_RCC_OscConfig+0x93c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ef      	beq.n	8001098 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x858>
 80010c2:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a39      	ldr	r2, [pc, #228]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	e02f      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x87c>
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4a33      	ldr	r2, [pc, #204]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	6213      	str	r3, [r2, #32]
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a30      	ldr	r2, [pc, #192]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80010ec:	f023 0304 	bic.w	r3, r3, #4
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x8a0>
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0x8b8>
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 800112a:	f023 0304 	bic.w	r3, r3, #4
 800112e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d06b      	beq.n	8001212 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff f8a7 	bl	800028c <HAL_GetTick>
 800113e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	f7ff f8a2 	bl	800028c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e274      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 800115c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001160:	2202      	movs	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	fa93 f2a3 	rbit	r2, r3
 800116e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001178:	2202      	movs	r2, #2
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	fa93 f2a3 	rbit	r2, r3
 8001186:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800118a:	601a      	str	r2, [r3, #0]
  return(result);
 800118c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001190:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d108      	bne.n	80011b8 <HAL_RCC_OscConfig+0x940>
 80011a6:	4b01      	ldr	r3, [pc, #4]	; (80011ac <HAL_RCC_OscConfig+0x934>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x95c>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	10908120 	.word	0x10908120
 80011b4:	40007000 	.word	0x40007000
 80011b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011bc:	2202      	movs	r2, #2
 80011be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	fa93 f2a3 	rbit	r2, r3
 80011ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	4bbb      	ldr	r3, [pc, #748]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011d8:	2102      	movs	r1, #2
 80011da:	6011      	str	r1, [r2, #0]
 80011dc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	fa92 f1a2 	rbit	r1, r2
 80011e6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011ea:	6011      	str	r1, [r2, #0]
  return(result);
 80011ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b252      	sxtb	r2, r2
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	b252      	sxtb	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f002 021f 	and.w	r2, r2, #31
 8001204:	2101      	movs	r1, #1
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d099      	beq.n	8001144 <HAL_RCC_OscConfig+0x8cc>
 8001210:	e064      	b.n	80012dc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff f83b 	bl	800028c <HAL_GetTick>
 8001216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff f836 	bl	800028c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e208      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001234:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	fa93 f2a3 	rbit	r2, r3
 8001246:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001262:	601a      	str	r2, [r3, #0]
  return(result);
 8001264:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001268:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	095b      	lsrs	r3, r3, #5
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d102      	bne.n	8001284 <HAL_RCC_OscConfig+0xa0c>
 800127e:	4b90      	ldr	r3, [pc, #576]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	e00d      	b.n	80012a0 <HAL_RCC_OscConfig+0xa28>
 8001284:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001288:	2202      	movs	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f2a3 	rbit	r2, r3
 8001296:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012a4:	2102      	movs	r1, #2
 80012a6:	6011      	str	r1, [r2, #0]
 80012a8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	fa92 f1a2 	rbit	r1, r2
 80012b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012b6:	6011      	str	r1, [r2, #0]
  return(result);
 80012b8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	fab2 f282 	clz	r2, r2
 80012c2:	b252      	sxtb	r2, r2
 80012c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012c8:	b252      	sxtb	r2, r2
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	f002 021f 	and.w	r2, r2, #31
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d19f      	bne.n	800121c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e4:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	4a75      	ldr	r2, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 81a4 	beq.w	8001644 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	f000 819b 	beq.w	8001640 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b02      	cmp	r3, #2
 8001312:	f040 8113 	bne.w	800153c <HAL_RCC_OscConfig+0xcc4>
 8001316:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800131a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800131e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f2a3 	rbit	r2, r3
 800132a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800132e:	601a      	str	r2, [r3, #0]
  return(result);
 8001330:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001334:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800133e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	461a      	mov	r2, r3
 8001346:	2300      	movs	r3, #0
 8001348:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7fe ff9f 	bl	800028c <HAL_GetTick>
 800134e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	e009      	b.n	8001368 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7fe ff9a 	bl	800028c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e16e      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001368:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800136c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001380:	601a      	str	r2, [r3, #0]
  return(result);
 8001382:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001386:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0xb2a>
 800139c:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	e01b      	b.n	80013da <HAL_RCC_OscConfig+0xb62>
 80013a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	fa93 f2a3 	rbit	r2, r3
 80013d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013e2:	6011      	str	r1, [r2, #0]
 80013e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	fa92 f1a2 	rbit	r1, r2
 80013ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013f2:	6011      	str	r1, [r2, #0]
  return(result);
 80013f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	fab2 f282 	clz	r2, r2
 80013fe:	b252      	sxtb	r2, r2
 8001400:	f042 0220 	orr.w	r2, r2, #32
 8001404:	b252      	sxtb	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f002 021f 	and.w	r2, r2, #31
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d19d      	bne.n	8001354 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	430b      	orrs	r3, r1
 800142e:	4924      	ldr	r1, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800143c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800144c:	601a      	str	r2, [r3, #0]
  return(result);
 800144e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001452:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800145c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	461a      	mov	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7fe ff10 	bl	800028c <HAL_GetTick>
 800146c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001470:	e009      	b.n	8001486 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001472:	f7fe ff0b 	bl	800028c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0df      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 8001486:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800148a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800148e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149e:	601a      	str	r2, [r3, #0]
  return(result);
 80014a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d104      	bne.n	80014c4 <HAL_RCC_OscConfig+0xc4c>
 80014ba:	4b01      	ldr	r3, [pc, #4]	; (80014c0 <HAL_RCC_OscConfig+0xc48>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xc84>
 80014c0:	40021000 	.word	0x40021000
 80014c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f2a3 	rbit	r2, r3
 80014f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	4b55      	ldr	r3, [pc, #340]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001500:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001504:	6011      	str	r1, [r2, #0]
 8001506:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	fa92 f1a2 	rbit	r1, r2
 8001510:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001514:	6011      	str	r1, [r2, #0]
  return(result);
 8001516:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	fab2 f282 	clz	r2, r2
 8001520:	b252      	sxtb	r2, r2
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	b252      	sxtb	r2, r2
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f002 021f 	and.w	r2, r2, #31
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d09b      	beq.n	8001472 <HAL_RCC_OscConfig+0xbfa>
 800153a:	e083      	b.n	8001644 <HAL_RCC_OscConfig+0xdcc>
 800153c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	fa93 f2a3 	rbit	r2, r3
 8001550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001554:	601a      	str	r2, [r3, #0]
  return(result);
 8001556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001564:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	461a      	mov	r2, r3
 800156c:	2300      	movs	r3, #0
 800156e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7fe fe8c 	bl	800028c <HAL_GetTick>
 8001574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	e009      	b.n	800158e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7fe fe87 	bl	800028c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e05b      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	601a      	str	r2, [r3, #0]
  return(result);
 80015a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d102      	bne.n	80015c8 <HAL_RCC_OscConfig+0xd50>
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	e01b      	b.n	8001600 <HAL_RCC_OscConfig+0xd88>
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f2a3 	rbit	r2, r3
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_RCC_OscConfig+0xdd8>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f107 0214 	add.w	r2, r7, #20
 8001604:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001608:	6011      	str	r1, [r2, #0]
 800160a:	f107 0214 	add.w	r2, r7, #20
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	fa92 f1a2 	rbit	r1, r2
 8001614:	f107 0210 	add.w	r2, r7, #16
 8001618:	6011      	str	r1, [r2, #0]
  return(result);
 800161a:	f107 0210 	add.w	r2, r7, #16
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	fab2 f282 	clz	r2, r2
 8001624:	b252      	sxtb	r2, r2
 8001626:	f042 0220 	orr.w	r2, r2, #32
 800162a:	b252      	sxtb	r2, r2
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f002 021f 	and.w	r2, r2, #31
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d19d      	bne.n	800157a <HAL_RCC_OscConfig+0xd02>
 800163e:	e001      	b.n	8001644 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b09e      	sub	sp, #120	; 0x78
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e164      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d910      	bls.n	800169c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	498d      	ldr	r1, [pc, #564]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e14c      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4981      	ldr	r1, [pc, #516]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80df 	beq.w	8001886 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d13d      	bne.n	800174c <HAL_RCC_ClockConfig+0xf8>
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80016de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_ClockConfig+0xa6>
 80016f4:	4b71      	ldr	r3, [pc, #452]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	e00f      	b.n	800171a <HAL_RCC_ClockConfig+0xc6>
 80016fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	667b      	str	r3, [r7, #100]	; 0x64
 8001708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
 800170e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001716:	4b69      	ldr	r3, [pc, #420]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800171e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001722:	fa92 f2a2 	rbit	r2, r2
 8001726:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b252      	sxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b252      	sxtb	r2, r2
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f002 021f 	and.w	r2, r2, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0f4      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d13d      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x17c>
 8001754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001758:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_RCC_ClockConfig+0x12a>
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e00f      	b.n	800179e <HAL_RCC_ClockConfig+0x14a>
 800177e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
 800178c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
 8001792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800179a:	4b48      	ldr	r3, [pc, #288]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80017a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017a6:	fa92 f2a2 	rbit	r2, r2
 80017aa:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ae:	fab2 f282 	clz	r2, r2
 80017b2:	b252      	sxtb	r2, r2
 80017b4:	f042 0220 	orr.w	r2, r2, #32
 80017b8:	b252      	sxtb	r2, r2
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f002 021f 	and.w	r2, r2, #31
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d13b      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b2      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
 80017d0:	2302      	movs	r3, #2
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x1a4>
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_ClockConfig+0x1c0>
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2202      	movs	r2, #2
 8001816:	61ba      	str	r2, [r7, #24]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	fa92 f2a2 	rbit	r2, r2
 800181e:	617a      	str	r2, [r7, #20]
  return(result);
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b252      	sxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b252      	sxtb	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f002 021f 	and.w	r2, r2, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e078      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 0203 	bic.w	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	491a      	ldr	r1, [pc, #104]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001856:	f7fe fd19 	bl	800028c <HAL_GetTick>
 800185a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185c:	e00a      	b.n	8001874 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185e:	f7fe fd15 	bl	800028c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e060      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_ClockConfig+0x268>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 020c 	and.w	r2, r3, #12
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	429a      	cmp	r2, r3
 8001884:	d1eb      	bne.n	800185e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d215      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 0207 	bic.w	r2, r3, #7
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d006      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e03f      	b.n	8001936 <HAL_RCC_ClockConfig+0x2e2>
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4919      	ldr	r1, [pc, #100]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4911      	ldr	r1, [pc, #68]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018fe:	f000 f825 	bl	800194c <HAL_RCC_GetSysClockFreq>
 8001902:	4601      	mov	r1, r0
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_RCC_ClockConfig+0x2ec>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800190c:	23f0      	movs	r3, #240	; 0xf0
 800190e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	60fb      	str	r3, [r7, #12]
  return(result);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_RCC_ClockConfig+0x2f0>)
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	fa21 f303 	lsr.w	r3, r1, r3
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_RCC_ClockConfig+0x2f4>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f7fe fc68 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3778      	adds	r7, #120	; 0x78
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	08001f28 	.word	0x08001f28
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x30>
 8001976:	2b08      	cmp	r3, #8
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x36>
 800197a:	e03c      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 800197e:	623b      	str	r3, [r7, #32]
      break;
 8001980:	e03c      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001988:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800198c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	607b      	str	r3, [r7, #4]
  return(result);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	f003 020f 	and.w	r2, r3, #15
 80019ae:	230f      	movs	r3, #15
 80019b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xcc>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e004      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xd0>)
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	623b      	str	r3, [r7, #32]
      break;
 80019f4:	e002      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019f8:	623b      	str	r3, [r7, #32]
      break;
 80019fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	372c      	adds	r7, #44	; 0x2c
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	007a1200 	.word	0x007a1200
 8001a14:	08001f08 	.word	0x08001f08
 8001a18:	08001f18 	.word	0x08001f18
 8001a1c:	003d0900 	.word	0x003d0900

08001a20 <save_to_flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void save_to_flash(uint8_t *data)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	466b      	mov	r3, sp
 8001a2a:	461d      	mov	r5, r3
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4) + 1];
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7fe fbcb 	bl	80001c8 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	1c58      	adds	r0, r3, #1
 8001a38:	4603      	mov	r3, r0
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3e:	4601      	mov	r1, r0
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	f04f 0400 	mov.w	r4, #0
 8001a4c:	0154      	lsls	r4, r2, #5
 8001a4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a52:	014b      	lsls	r3, r1, #5
 8001a54:	4601      	mov	r1, r0
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	f04f 0400 	mov.w	r4, #0
 8001a62:	0154      	lsls	r4, r2, #5
 8001a64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a68:	014b      	lsls	r3, r1, #5
 8001a6a:	0083      	lsls	r3, r0, #2
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	3307      	adds	r3, #7
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	ebad 0d03 	sub.w	sp, sp, r3
 8001a78:	466b      	mov	r3, sp
 8001a7a:	3303      	adds	r3, #3
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8001a82:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fb9e 	bl	80001c8 <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2100      	movs	r1, #0
 8001a92:	4620      	mov	r0, r4
 8001a94:	f000 fa14 	bl	8001ec0 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fa17 	bl	8001ed0 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fb8f 	bl	80001c8 <strlen>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fb89 	bl	80001c8 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (data_length/(page_size / 4)) + 1;
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	0a5b      	lsrs	r3, r3, #9
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001ad6:	f7fe fd3b 	bl	8000550 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 8001ada:	f7fe fd6f 	bl	80005bc <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <save_to_flash+0x144>)
 8001ae4:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 8001ae6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001af4:	f107 0218 	add.w	r2, r7, #24
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fe16 	bl	8000730 <HAL_FLASHEx_Erase>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
	  while(index < data_length)
 8001b08:	e01f      	b.n	8001b4a <save_to_flash+0x12a>
	  {
		  if (status == HAL_OK)
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11b      	bne.n	8001b4a <save_to_flash+0x12a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001b18:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	f04f 0400 	mov.w	r4, #0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f7fe fc9f 	bl	8000470 <HAL_FLASH_Program>
 8001b32:	4603      	mov	r3, r0
 8001b34:	73fb      	strb	r3, [r7, #15]
			  if(status == HAL_OK)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <save_to_flash+0x12a>
			  {
				  write_cnt += 4;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
				  index++;
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	3301      	adds	r3, #1
 8001b48:	613b      	str	r3, [r7, #16]
	  while(index < data_length)
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3db      	bcc.n	8001b0a <save_to_flash+0xea>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8001b52:	f7fe fd4f 	bl	80005f4 <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 8001b56:	f7fe fd21 	bl	800059c <HAL_FLASH_Lock>
 8001b5a:	46ad      	mov	sp, r5
}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	; 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}
 8001b64:	08005000 	.word	0x08005000

08001b68 <read_flash>:

void read_flash(uint8_t* data)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001b7a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d020      	beq.n	8001bcc <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	b2ca      	uxtb	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	0a19      	lsrs	r1, r3, #8
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	0c19      	lsrs	r1, r3, #16
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3302      	adds	r3, #2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	0e19      	lsrs	r1, r3, #24
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b2ca      	uxtb	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd2:	d1cf      	bne.n	8001b74 <read_flash+0xc>
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b09f      	sub	sp, #124	; 0x7c
 8001be4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be6:	f7fe faf7 	bl	80001d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bea:	f000 f837 	bl	8001c5c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  char write_data[50];
  memset(write_data, 0, sizeof(write_data));
 8001bee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bf2:	2232      	movs	r2, #50	; 0x32
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f962 	bl	8001ec0 <memset>
  strcpy(write_data, "Hello World!!!");
 8001bfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <main+0x74>)
 8001c02:	461c      	mov	r4, r3
 8001c04:	4613      	mov	r3, r2
 8001c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c08:	c407      	stmia	r4!, {r0, r1, r2}
 8001c0a:	8023      	strh	r3, [r4, #0]
 8001c0c:	3402      	adds	r4, #2
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	7023      	strb	r3, [r4, #0]

  save_to_flash((uint8_t*)write_data);
 8001c12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff02 	bl	8001a20 <save_to_flash>

  char read_data[50];
  memset(read_data, 0, sizeof(read_data));
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	2232      	movs	r2, #50	; 0x32
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f94b 	bl	8001ec0 <memset>

  read_flash((uint8_t*)read_data);
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff9a 	bl	8001b68 <read_flash>

  float write_number = 235.756f;
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <main+0x78>)
 8001c36:	607b      	str	r3, [r7, #4]
  float *pointer_write = &write_number;
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	677b      	str	r3, [r7, #116]	; 0x74
  save_to_flash((uint8_t*)pointer_write);
 8001c3c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c3e:	f7ff feef 	bl	8001a20 <save_to_flash>

  float read_number = 0.0f;
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  float *pointer_read = &read_number;
 8001c48:	463b      	mov	r3, r7
 8001c4a:	673b      	str	r3, [r7, #112]	; 0x70
  read_flash((uint8_t*)pointer_read);
 8001c4c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c4e:	f7ff ff8b 	bl	8001b68 <read_flash>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <main+0x72>
 8001c54:	08001ef8 	.word	0x08001ef8
 8001c58:	436bc189 	.word	0x436bc189

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b090      	sub	sp, #64	; 0x40
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	2228      	movs	r2, #40	; 0x28
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f928 	bl	8001ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c82:	2301      	movs	r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c86:	2310      	movs	r3, #16
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fdeb 	bl	8000878 <HAL_RCC_OscConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ca8:	f000 f818 	bl	8001cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cac:	230f      	movs	r3, #15
 8001cae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fcc5 	bl	8001654 <HAL_RCC_ClockConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001cd0:	f000 f804 	bl	8001cdc <Error_Handler>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3740      	adds	r7, #64	; 0x40
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_MspInit+0x44>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_MspInit+0x44>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_MspInit+0x44>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_MspInit+0x44>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_MspInit+0x44>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_MspInit+0x44>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f7fe fa6c 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <SystemInit+0x84>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <SystemInit+0x84>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <SystemInit+0x88>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <SystemInit+0x88>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <SystemInit+0x88>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4918      	ldr	r1, [pc, #96]	; (8001e18 <SystemInit+0x88>)
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <SystemInit+0x8c>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <SystemInit+0x88>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <SystemInit+0x88>)
 8001dc2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <SystemInit+0x88>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <SystemInit+0x88>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <SystemInit+0x88>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <SystemInit+0x88>)
 8001dde:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001de2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <SystemInit+0x88>)
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <SystemInit+0x88>)
 8001dea:	f023 030f 	bic.w	r3, r3, #15
 8001dee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <SystemInit+0x88>)
 8001df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df4:	4908      	ldr	r1, [pc, #32]	; (8001e18 <SystemInit+0x88>)
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <SystemInit+0x90>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x88>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SystemInit+0x84>)
 8001e04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e08:	609a      	str	r2, [r3, #8]
#endif
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	f87fc00c 	.word	0xf87fc00c
 8001e20:	ff00fccc 	.word	0xff00fccc

08001e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e2a:	e003      	b.n	8001e34 <LoopCopyDataInit>

08001e2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e32:	3104      	adds	r1, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e3c:	d3f6      	bcc.n	8001e2c <CopyDataInit>
	ldr	r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e40:	e002      	b.n	8001e48 <LoopFillZerobss>

08001e42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e44:	f842 3b04 	str.w	r3, [r2], #4

08001e48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <LoopForever+0x16>)
	cmp	r2, r3
 8001e4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e4c:	d3f9      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4e:	f7ff ff9f 	bl	8001d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f000 f811 	bl	8001e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e56:	f7ff fec3 	bl	8001be0 <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e5c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001e60:	08001f40 	.word	0x08001f40
	ldr	r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e68:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001e6c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001e70:	20000050 	.word	0x20000050

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>
	...

08001e78 <__libc_init_array>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	4e0d      	ldr	r6, [pc, #52]	; (8001eb0 <__libc_init_array+0x38>)
 8001e7c:	4c0d      	ldr	r4, [pc, #52]	; (8001eb4 <__libc_init_array+0x3c>)
 8001e7e:	1ba4      	subs	r4, r4, r6
 8001e80:	10a4      	asrs	r4, r4, #2
 8001e82:	2500      	movs	r5, #0
 8001e84:	42a5      	cmp	r5, r4
 8001e86:	d109      	bne.n	8001e9c <__libc_init_array+0x24>
 8001e88:	4e0b      	ldr	r6, [pc, #44]	; (8001eb8 <__libc_init_array+0x40>)
 8001e8a:	4c0c      	ldr	r4, [pc, #48]	; (8001ebc <__libc_init_array+0x44>)
 8001e8c:	f000 f828 	bl	8001ee0 <_init>
 8001e90:	1ba4      	subs	r4, r4, r6
 8001e92:	10a4      	asrs	r4, r4, #2
 8001e94:	2500      	movs	r5, #0
 8001e96:	42a5      	cmp	r5, r4
 8001e98:	d105      	bne.n	8001ea6 <__libc_init_array+0x2e>
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea0:	4798      	blx	r3
 8001ea2:	3501      	adds	r5, #1
 8001ea4:	e7ee      	b.n	8001e84 <__libc_init_array+0xc>
 8001ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eaa:	4798      	blx	r3
 8001eac:	3501      	adds	r5, #1
 8001eae:	e7f2      	b.n	8001e96 <__libc_init_array+0x1e>
 8001eb0:	08001f38 	.word	0x08001f38
 8001eb4:	08001f38 	.word	0x08001f38
 8001eb8:	08001f38 	.word	0x08001f38
 8001ebc:	08001f3c 	.word	0x08001f3c

08001ec0 <memset>:
 8001ec0:	4402      	add	r2, r0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d100      	bne.n	8001eca <memset+0xa>
 8001ec8:	4770      	bx	lr
 8001eca:	f803 1b01 	strb.w	r1, [r3], #1
 8001ece:	e7f9      	b.n	8001ec4 <memset+0x4>

08001ed0 <strcpy>:
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ed6:	f803 2b01 	strb.w	r2, [r3], #1
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d1f9      	bne.n	8001ed2 <strcpy+0x2>
 8001ede:	4770      	bx	lr

08001ee0 <_init>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr

08001eec <_fini>:
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eee:	bf00      	nop
 8001ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef2:	bc08      	pop	{r3}
 8001ef4:	469e      	mov	lr, r3
 8001ef6:	4770      	bx	lr
